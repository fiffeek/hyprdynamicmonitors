"use strict";(globalThis.webpackChunkdocs=globalThis.webpackChunkdocs||[]).push([[7738],{8294:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"usage/commands","title":"CLI Commands","description":"HyprDynamicMonitors provides several commands for managing monitor configurations.","source":"@site/docs/usage/commands.md","sourceDirName":"usage","slug":"/usage/commands","permalink":"/docs/next/usage/commands","draft":false,"unlisted":false,"editUrl":"https://github.com/fiffeek/hyprdynamicmonitors/tree/main/docs/docs/usage/commands.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Usage","permalink":"/docs/next/category/usage"},"next":{"title":"Signals","permalink":"/docs/next/usage/signals"}}');var a=i(4848),t=i(8453);const s={sidebar_position:1},r="CLI Commands",l={},c=[{value:"Global Flags",id:"global-flags",level:2},{value:"run",id:"run",level:2},{value:"Flags",id:"flags",level:3},{value:"Examples",id:"examples",level:3},{value:"validate",id:"validate",level:2},{value:"Flags",id:"flags-1",level:3},{value:"Examples",id:"examples-1",level:3},{value:"freeze",id:"freeze",level:2},{value:"Flags",id:"flags-2",level:3},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Examples",id:"examples-2",level:3},{value:"tui",id:"tui",level:2},{value:"Flags",id:"flags-3",level:3},{value:"Compatibility",id:"compatibility",level:3},{value:"Examples",id:"examples-3",level:3},{value:"completion",id:"completion",level:2},{value:"Examples",id:"examples-4",level:3}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"cli-commands",children:"CLI Commands"})}),"\n",(0,a.jsx)(e.p,{children:"HyprDynamicMonitors provides several commands for managing monitor configurations."}),"\n",(0,a.jsx)(e.h2,{id:"global-flags",children:"Global Flags"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:'HyprDynamicMonitors is a service that automatically switches between predefined Hyprland monitor configuration profiles based on connected monitors and power state.\n\nUsage:\n  hyprdynamicmonitors [command]\n\nAvailable Commands:\n  completion  Generate the autocompletion script for the specified shell\n  freeze      Freeze current monitor configuration as a new profile template\n  help        Help about any command\n  run         Run the monitor configuration service\n  tui         Launch interactive TUI for monitor configuration\n  validate    Validate configuration file\n\nFlags:\n      --config string             Path to configuration file (default "$HOME/.config/hyprdynamicmonitors/config.toml")\n      --debug                     Enable debug logging\n      --enable-json-logs-format   Enable structured logging\n  -h, --help                      help for hyprdynamicmonitors\n      --verbose                   Enable verbose logging\n  -v, --version                   version for hyprdynamicmonitors\n\nUse "hyprdynamicmonitors [command] --help" for more information about a command.\n'})}),"\n",(0,a.jsx)(e.h2,{id:"run",children:"run"}),"\n",(0,a.jsx)(e.p,{children:"Run the HyprDynamicMonitors service to continuously monitor for display changes and automatically apply matching configuration profiles."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"hyprdynamicmonitors run [flags]\n"})}),"\n",(0,a.jsx)(e.h3,{id:"flags",children:"Flags"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:'Run the HyprDynamicMonitors service to continuously monitor for display changes and automatically apply matching configuration profiles.\n\nUsage:\n  hyprdynamicmonitors run [flags]\n\nFlags:\n      --connect-to-session-bus    Connect to session bus instead of system bus for power events: https://wiki.archlinux.org/title/D-Bus. You can switch as long as you expose power line events in your user session bus.\n      --disable-auto-hot-reload   Disable automatic hot reload (no file watchers)\n      --disable-power-events      Disable power events (dbus)\n      --dry-run                   Show what would be done without making changes\n      --enable-lid-events         Enable listening to dbus lid events\n  -h, --help                      help for run\n      --run-once                  Run once and exit immediately\n\nGlobal Flags:\n      --config string             Path to configuration file (default "$HOME/.config/hyprdynamicmonitors/config.toml")\n      --debug                     Enable debug logging\n      --enable-json-logs-format   Enable structured logging\n      --verbose                   Enable verbose logging\n'})}),"\n",(0,a.jsx)(e.h3,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"# Run the service normally\nhyprdynamicmonitors run\n\n# Run with dry-run to see what would happen\nhyprdynamicmonitors run --dry-run\n\n# Run once and exit (useful for testing)\nhyprdynamicmonitors run --run-once\n\n# Disable power events\nhyprdynamicmonitors run --disable-power-events\n\n# Enable lid events\nhyprdynamicmonitors run --enable-lid-events\n"})}),"\n",(0,a.jsx)(e.h2,{id:"validate",children:"validate"}),"\n",(0,a.jsx)(e.p,{children:"Validate the configuration file for syntax errors and logical consistency."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"hyprdynamicmonitors validate [flags]\n"})}),"\n",(0,a.jsx)(e.h3,{id:"flags-1",children:"Flags"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:'Validate the configuration file for syntax errors and logical consistency.\n\nUsage:\n  hyprdynamicmonitors validate [flags]\n\nFlags:\n  -h, --help   help for validate\n\nGlobal Flags:\n      --config string             Path to configuration file (default "$HOME/.config/hyprdynamicmonitors/config.toml")\n      --debug                     Enable debug logging\n      --enable-json-logs-format   Enable structured logging\n      --verbose                   Enable verbose logging\n'})}),"\n",(0,a.jsx)(e.h3,{id:"examples-1",children:"Examples"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"# Validate default config file\nhyprdynamicmonitors validate\n\n# Validate specific config file\nhyprdynamicmonitors --config /path/to/config.toml validate\n\n# Validate with debug output\nhyprdynamicmonitors --debug validate\n"})}),"\n",(0,a.jsx)(e.h2,{id:"freeze",children:"freeze"}),"\n",(0,a.jsx)(e.p,{children:"Freeze the current Hyprland monitor configuration and save it as a new profile template."}),"\n",(0,a.jsx)(e.p,{children:"This command captures your current monitor setup and creates two artifacts:"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsx)(e.li,{children:"A Go template file containing the Hyprland configuration"}),"\n",(0,a.jsx)(e.li,{children:"A new profile entry in your configuration file that references this template"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"hyprdynamicmonitors freeze [flags]\n"})}),"\n",(0,a.jsx)(e.h3,{id:"flags-2",children:"Flags"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:'Freeze the current Hyprland monitor configuration and save it as a new profile template.\n\nThis command captures your current monitor setup and creates two artifacts:\n1. A Go template file containing the Hyprland configuration\n2. A new profile entry in your configuration file that references this template\n\nTEMPLATE FILE:\nThe Go template will be saved to hyprconfigs/{profile-name}.go.tmpl by default, or to a\ncustom location specified with --config-file-location. This template can be edited after\ncreation to customize the configuration.\n\nPROFILE ENTRY:\nA new profile with the specified name will be appended to your configuration file. The\nprofile will automatically require monitors by description (not name) to ensure better\nportability across different systems.\n\nPREREQUISITES:\n- The profile name must not already exist in your configuration (it will be checked)\n- The template file location must not exist (it will be created)\n- Hyprland must be running with a valid monitor configuration\n\nThis is useful for quickly creating new profiles based on your current working setup.\n\nUsage:\n  hyprdynamicmonitors freeze [flags]\n\nFlags:\n      --config-file-location string   Where to put the generated config file template (defaults to hyprconfigs/$PROFILE_NAME.go.tmpl)\n  -h, --help                          help for freeze\n      --profile-name string           What profile name to set the frozen profile to.\n\nGlobal Flags:\n      --config string             Path to configuration file (default "$HOME/.config/hyprdynamicmonitors/config.toml")\n      --debug                     Enable debug logging\n      --enable-json-logs-format   Enable structured logging\n      --verbose                   Enable verbose logging\n'})}),"\n",(0,a.jsx)(e.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"The profile name must not already exist in your configuration"}),"\n",(0,a.jsx)(e.li,{children:"The template file location must not exist (it will be created)"}),"\n",(0,a.jsx)(e.li,{children:"Hyprland must be running with a valid monitor configuration"}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"examples-2",children:"Examples"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"# Freeze current setup as a new profile\nhyprdynamicmonitors freeze --profile-name dual-monitors\n\n# Freeze with custom template location\nhyprdynamicmonitors freeze --profile-name triple-4k \\\n  --config-file-location ~/my-configs/triple.go.tmpl\n"})}),"\n",(0,a.jsx)(e.h2,{id:"tui",children:"tui"}),"\n",(0,a.jsx)(e.p,{children:"Launch an interactive terminal-based TUI for managing monitor configurations."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"hyprdynamicmonitors tui [flags]\n"})}),"\n",(0,a.jsx)(e.h3,{id:"flags-3",children:"Flags"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:'Launch an interactive terminal-based TUI for managing monitor configurations.\n\nUsage:\n  hyprdynamicmonitors tui [flags]\n\nFlags:\n      --connect-to-session-bus          Connect to session bus instead of system bus for power events: https://wiki.archlinux.org/title/D-Bus. You can switch as long as you expose power line events in your user session bus.\n      --disable-power-events            Disable power events (dbus)\n      --enable-lid-events               Enable listening to dbus lid events\n  -h, --help                            help for tui\n      --hypr-monitors-override string   When used it fill parse the given file as hyprland monitors spec, used for testing.\n      --running-under-test              Use test settings such as no styling etc.\n\nGlobal Flags:\n      --config string             Path to configuration file (default "$HOME/.config/hyprdynamicmonitors/config.toml")\n      --debug                     Enable debug logging\n      --enable-json-logs-format   Enable structured logging\n      --verbose                   Enable verbose logging\n'})}),"\n",(0,a.jsx)(e.h3,{id:"compatibility",children:"Compatibility"}),"\n",(0,a.jsxs)(e.p,{children:["The TUI has the same flags as ",(0,a.jsx)(e.code,{children:"run"})," and can be used without the running daemon for ad-hoc changes. When the config is not passed or invalid, you will be unable to persist the configuration in the ",(0,a.jsx)(e.code,{children:"hyprdynamicmonitors"})," config, but you can still experiment with monitors and apply the Hyprland configuration."]}),"\n",(0,a.jsxs)(e.p,{children:["Refer to the ",(0,a.jsx)(e.a,{href:"../quickstart/tui",children:"TUI Guide"})," for more details."]}),"\n",(0,a.jsx)(e.h3,{id:"examples-3",children:"Examples"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"# Launch TUI normally\nhyprdynamicmonitors tui\n\n# Launch TUI with lid events enabled\nhyprdynamicmonitors tui --enable-lid-events\n\n# Launch TUI for testing with a mock monitors file\nhyprdynamicmonitors tui --hypr-monitors-override /path/to/monitors-spec.txt\n\n# Launch TUI for testing with a mock monitors file and custom config\nhyprdynamicmonitors tui --hypr-monitors-override /path/to/monitors-spec.txt --config /path/to/config.toml\n"})}),"\n",(0,a.jsx)(e.h2,{id:"completion",children:"completion"}),"\n",(0,a.jsx)(e.p,{children:"Generate autocompletion scripts for various shells."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"hyprdynamicmonitors completion [bash|zsh|fish|powershell]\n"})}),"\n",(0,a.jsx)(e.h3,{id:"examples-4",children:"Examples"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:'# Bash\nhyprdynamicmonitors completion bash > /etc/bash_completion.d/hyprdynamicmonitors\n\n# Zsh\nhyprdynamicmonitors completion zsh > "${fpath[1]}/_hyprdynamicmonitors"\n\n# Fish\nhyprdynamicmonitors completion fish > ~/.config/fish/completions/hyprdynamicmonitors.fish\n'})})]})}function m(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>s,x:()=>r});var o=i(6540);const a={},t=o.createContext(a);function s(n){const e=o.useContext(t);return o.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),o.createElement(t.Provider,{value:e},n.children)}}}]);
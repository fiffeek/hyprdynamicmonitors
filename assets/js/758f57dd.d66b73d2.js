"use strict";(globalThis.webpackChunkdocs=globalThis.webpackChunkdocs||[]).push([[7713],{7291:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>t,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"configuration/profiles","title":"Profiles","description":"Profiles define different monitor configurations for different setups. Each profile specifies which monitors it applies to and what configuration to use.","source":"@site/versioned_docs/version-v1.3.3/configuration/profiles.md","sourceDirName":"configuration","slug":"/configuration/profiles","permalink":"/docs/configuration/profiles","draft":false,"unlisted":false,"editUrl":"https://github.com/fiffeek/hyprdynamicmonitors/tree/main/docs/versioned_docs/version-v1.3.3/configuration/profiles.md","tags":[],"version":"v1.3.3","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Monitor Matching","permalink":"/docs/configuration/monitor-matching"},"next":{"title":"Power Events","permalink":"/docs/configuration/power-events"}}');var l=i(4848),r=i(8453);const t={sidebar_position:3},s="Profiles",a={},c=[{value:"Profile Structure",id:"profile-structure",level:2},{value:"Configuration File Types",id:"configuration-file-types",level:2},{value:"Static Configuration",id:"static-configuration",level:3},{value:"Template Configuration",id:"template-configuration",level:3},{value:"Profile Conditions",id:"profile-conditions",level:2},{value:"Required Monitors",id:"required-monitors",level:3},{value:"Power State Conditions",id:"power-state-conditions",level:3},{value:"Lid State Conditions",id:"lid-state-conditions",level:3},{value:"Combining Conditions",id:"combining-conditions",level:3},{value:"Static Template Values",id:"static-template-values",level:2},{value:"Global Static Values",id:"global-static-values",level:3},{value:"Per-Profile Static Values",id:"per-profile-static-values",level:3},{value:"Using in Templates",id:"using-in-templates",level:3},{value:"Fallback Profile",id:"fallback-profile",level:2},{value:"Profile Callbacks",id:"profile-callbacks",level:2},{value:"Examples",id:"examples",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"profiles",children:"Profiles"})}),"\n",(0,l.jsx)(n.p,{children:"Profiles define different monitor configurations for different setups. Each profile specifies which monitors it applies to and what configuration to use."}),"\n",(0,l.jsx)(n.h2,{id:"profile-structure",children:"Profile Structure"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:'[profiles.PROFILE_NAME]\nconfig_file = "path/to/config/file"\nconfig_file_type = "static"  # or "template"\n\n[profiles.PROFILE_NAME.conditions]\npower_state = "AC"      # optional: "AC" or "BAT"\nlid_state = "Opened"    # optional: "Opened" or "Closed" (requires --enable-lid-events)\n\n[[profiles.PROFILE_NAME.conditions.required_monitors]]\nname = "eDP-1"\nmonitor_tag = "laptop"  # optional\n'})}),"\n",(0,l.jsx)(n.h2,{id:"configuration-file-types",children:"Configuration File Types"}),"\n",(0,l.jsx)(n.h3,{id:"static-configuration",children:"Static Configuration"}),"\n",(0,l.jsx)(n.p,{children:"Static configurations are plain Hyprland config files. The service creates a symlink to them."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:'[profiles.laptop_only]\nconfig_file = "hyprconfigs/laptop.conf"\nconfig_file_type = "static"\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"hyprconfigs/laptop.conf:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"monitor=eDP-1,2880x1920@120,0x0,2.0,vrr,1\n"})}),"\n",(0,l.jsx)(n.h3,{id:"template-configuration",children:"Template Configuration"}),"\n",(0,l.jsx)(n.p,{children:"Templates use Go template syntax for dynamic configuration generation."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:'[profiles.dual_monitor]\nconfig_file = "hyprconfigs/dual.go.tmpl"\nconfig_file_type = "template"\n\n[[profiles.dual_monitor.conditions.required_monitors]]\nname = "eDP-1"\nmonitor_tag = "laptop"\n\n[[profiles.dual_monitor.conditions.required_monitors]]\ndescription = "LG.*ULTRAWIDE"\nmonitor_tag = "external"\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"hyprconfigs/dual.go.tmpl:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-go",children:'{{- $laptop := index .MonitorsByTag "laptop" -}}\n{{- $external := index .MonitorsByTag "external" -}}\nmonitor={{$laptop.Name}},{{if isOnAC}}2880x1920@120{{else}}1920x1080@60{{end}},0x0,2.0\nmonitor={{$external.Name}},preferred,2880x0,1\n'})}),"\n",(0,l.jsxs)(n.p,{children:["See ",(0,l.jsx)(n.a,{href:"../advanced/templates",children:"Templates"})," for details on template syntax and variables."]}),"\n",(0,l.jsx)(n.h2,{id:"profile-conditions",children:"Profile Conditions"}),"\n",(0,l.jsx)(n.h3,{id:"required-monitors",children:"Required Monitors"}),"\n",(0,l.jsx)(n.p,{children:"Each profile can require specific monitors to be connected. A profile matches when all its required monitors are present."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:'# Single monitor\n[[profiles.laptop_only.conditions.required_monitors]]\nname = "eDP-1"\n\n# Multiple monitors\n[[profiles.triple_4k.conditions.required_monitors]]\nname = "eDP-1"\n\n[[profiles.triple_4k.conditions.required_monitors]]\ndescription = "Dell U2720Q"\n\n[[profiles.triple_4k.conditions.required_monitors]]\ndescription = "LG 27UK850"\n'})}),"\n",(0,l.jsx)(n.h3,{id:"power-state-conditions",children:"Power State Conditions"}),"\n",(0,l.jsx)(n.p,{children:"You can restrict a profile to only match on specific power states:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:'[profiles.performance_mode.conditions]\npower_state = "AC"  # Only match when plugged into AC power\n\n[[profiles.performance_mode.conditions.required_monitors]]\nname = "eDP-1"\n\n[profiles.battery_saver.conditions]\npower_state = "BAT"  # Only match when on battery\n\n[[profiles.battery_saver.conditions.required_monitors]]\nname = "eDP-1"\n'})}),"\n",(0,l.jsx)(n.p,{children:"Valid values:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:'"AC"'})," - Only match when on AC power"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:'"BAT"'})," - Only match when on battery power"]}),"\n",(0,l.jsxs)(n.li,{children:["Omit ",(0,l.jsx)(n.code,{children:"power_state"})," condition to match on any power state"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["See ",(0,l.jsx)(n.a,{href:"https://github.com/fiffeek/hyprdynamicmonitors/tree/main/examples/power-states",children:"Power States Example"})," for a complete configuration."]}),"\n",(0,l.jsx)(n.h3,{id:"lid-state-conditions",children:"Lid State Conditions"}),"\n",(0,l.jsxs)(n.p,{children:["You can restrict a profile to only match on specific lid states (requires ",(0,l.jsx)(n.code,{children:"--enable-lid-events"})," flag):"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:'[profiles.lid_closed.conditions]\nlid_state = "Closed"  # Only match when lid is closed\n\n[[profiles.lid_closed.conditions.required_monitors]]\nname = "eDP-1"\n\n[profiles.lid_opened.conditions]\nlid_state = "Opened"  # Only match when lid is open\n\n[[profiles.lid_opened.conditions.required_monitors]]\nname = "eDP-1"\n'})}),"\n",(0,l.jsx)(n.p,{children:"Valid values:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:'"Closed"'})," - Only match when lid is closed"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:'"Opened"'})," - Only match when lid is open"]}),"\n",(0,l.jsxs)(n.li,{children:["Omit ",(0,l.jsx)(n.code,{children:"lid_state"})," condition to match on any lid state"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["See ",(0,l.jsx)(n.a,{href:"https://github.com/fiffeek/hyprdynamicmonitors/tree/main/examples/lid-states",children:"Lid States Example"})," for a complete configuration."]}),"\n",(0,l.jsx)(n.h3,{id:"combining-conditions",children:"Combining Conditions"}),"\n",(0,l.jsx)(n.p,{children:"You can combine monitor, power state, and lid state conditions:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:'[profiles.docked_ac.conditions]\npower_state = "AC"\nlid_state = "Closed"\n\n[[profiles.docked_ac.conditions.required_monitors]]\nname = "eDP-1"\n\n[[profiles.docked_ac.conditions.required_monitors]]\ndescription = "External Monitor"\n'})}),"\n",(0,l.jsx)(n.p,{children:"This profile only matches when:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"On AC power AND"}),"\n",(0,l.jsx)(n.li,{children:"Lid is closed AND"}),"\n",(0,l.jsx)(n.li,{children:"Both eDP-1 and an external monitor are connected"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"static-template-values",children:"Static Template Values"}),"\n",(0,l.jsx)(n.p,{children:"You can define custom values that are available in templates. These can be defined globally or per-profile."}),"\n",(0,l.jsx)(n.h3,{id:"global-static-values",children:"Global Static Values"}),"\n",(0,l.jsx)(n.p,{children:"Available in all templates:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:'[static_template_values]\ndefault_vrr = "1"\ndefault_res = "2880x1920"\nrefresh_rate_high = "120.00000"\nrefresh_rate_low = "60.00000"\n'})}),"\n",(0,l.jsx)(n.h3,{id:"per-profile-static-values",children:"Per-Profile Static Values"}),"\n",(0,l.jsx)(n.p,{children:"Override global values or add profile-specific values:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:'[profiles.laptop_only.static_template_values]\ndefault_vrr = "0"        # Override global value\nbattery_scaling = "1.5"  # Profile-specific value\n'})}),"\n",(0,l.jsx)(n.h3,{id:"using-in-templates",children:"Using in Templates"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-go",children:"monitor=eDP-1,{{.default_res}}@{{if isOnAC}}{{.refresh_rate_high}}{{else}}{{.refresh_rate_low}}{{end}},0x0,1,vrr,{{.default_vrr}}\n"})}),"\n",(0,l.jsx)(n.h2,{id:"fallback-profile",children:"Fallback Profile"}),"\n",(0,l.jsx)(n.p,{children:"When no regular profile matches, you can define a fallback profile:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:'[fallback_profile]\nconfig_file = "hyprconfigs/fallback.conf"\nconfig_file_type = "static"\n'})}),"\n",(0,l.jsx)(n.p,{children:"The fallback profile:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Cannot define conditions (used when no conditions match)"}),"\n",(0,l.jsx)(n.li,{children:"Supports both static and template configuration types"}),"\n",(0,l.jsx)(n.li,{children:"Only used when no regular profile matches"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example fallback configuration:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"# Generic fallback: configure all connected monitors with preferred settings\nmonitor=,preferred,auto,1\n"})}),"\n",(0,l.jsx)(n.h2,{id:"profile-callbacks",children:"Profile Callbacks"}),"\n",(0,l.jsx)(n.p,{children:"You can define commands to execute before and after profile application:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:'[general]\n# Global exec commands - run for all profile changes\npre_apply_exec = "notify-send \'Switching profile...\'"\npost_apply_exec = "notify-send \'Profile applied\'"\n\n# Profile-specific commands override global settings\n[profiles.gaming_setup]\nconfig_file = "hyprconfigs/gaming.conf"\npre_apply_exec = "notify-send \'Gaming Mode\' \'Activating...\'"\npost_apply_exec = "/usr/local/bin/gaming-mode-on.sh"\n'})}),"\n",(0,l.jsxs)(n.p,{children:["See ",(0,l.jsx)(n.a,{href:"./callbacks",children:"Callbacks"})," for details."]}),"\n",(0,l.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,l.jsx)(n.p,{children:"For complete configuration examples, see:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://github.com/fiffeek/hyprdynamicmonitors/tree/main/examples/basic",children:"Basic Example"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://github.com/fiffeek/hyprdynamicmonitors/blob/main/examples/full/config.toml",children:"Full Configuration"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://github.com/fiffeek/hyprdynamicmonitors/tree/main/examples/power-states",children:"Power States Example"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://github.com/fiffeek/hyprdynamicmonitors/tree/main/examples/lid-states",children:"Lid States Example"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://github.com/fiffeek/hyprdynamicmonitors/tree/main/examples/disable-monitors",children:"Disable Monitors Example"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://github.com/fiffeek/hyprdynamicmonitors/tree/main/examples/scoring",children:"Scoring Example"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>s});var o=i(6540);const l={},r=o.createContext(l);function t(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);
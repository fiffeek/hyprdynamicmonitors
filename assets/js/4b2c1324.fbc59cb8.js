"use strict";(globalThis.webpackChunkdocs=globalThis.webpackChunkdocs||[]).push([[3762],{2025:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/demo-52d6368560cb5c9ab12a271f8ba27aef.gif"},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var t=i(6540);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}},9275:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"intro","title":"Introduction","description":"HyprDynamicMonitors is an event-driven service that automatically manages Hyprland monitor configurations based on connected displays and power state.","source":"@site/versioned_docs/version-v1.3.0/intro.md","sourceDirName":".","slug":"/","permalink":"/docs/v1.3.0/","draft":false,"unlisted":false,"editUrl":"https://github.com/fiffeek/hyprdynamicmonitors/tree/main/docs/versioned_docs/version-v1.3.0/intro.md","tags":[],"version":"v1.3.0","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"slug":"/"},"sidebar":"tutorialSidebar","next":{"title":"Quick Start","permalink":"/docs/v1.3.0/category/quick-start"}}');var r=i(4848),s=i(8453);const o={sidebar_position:1,slug:"/"},a="Introduction",l={},c=[{value:"Features",id:"features",level:2},{value:"Design Philosophy",id:"design-philosophy",level:2},{value:"Reliability Through Restarts",id:"reliability-through-restarts",level:3},{value:"Hot Reloading With Graceful Restart",id:"hot-reloading-with-graceful-restart",level:3},{value:"Hyprland-Native Integration",id:"hyprland-native-integration",level:3},{value:"Quick Start",id:"quick-start",level:2},{value:"Runtime Requirements",id:"runtime-requirements",level:2},{value:"Alternative Software",id:"alternative-software",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,r.jsx)(n.p,{children:"HyprDynamicMonitors is an event-driven service that automatically manages Hyprland monitor configurations based on connected displays and power state.\nIt also provides a standalone TUI that can be used for ad-hoc modifications and profile management."}),"\n",(0,r.jsx)(n.h1,{id:"preview",children:"Preview"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Adjusting monitor scaling",src:i(2025).A+"",width:"1400",height:"1000"})}),"\n",(0,r.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event-driven architecture"})," responding to monitor, power and lid state changes in real-time"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Interactive TUI"})," for visual monitor configuration and profile management"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Profile-based configuration"})," with different settings for different monitor setups"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Template support"})," for dynamic configuration generation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Hot reloading"}),": automatically detects and applies configuration changes without restart by watching config files (optional)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Configurable UPower queries"})," for custom power management systems"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Desktop notifications"})," for configuration changes (optional)"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"design-philosophy",children:"Design Philosophy"}),"\n",(0,r.jsxs)(n.p,{children:["HyprDynamicMonitors follows a ",(0,r.jsx)(n.strong,{children:"fail-fast architecture"})," designed for reliability and simplicity."]}),"\n",(0,r.jsx)(n.h3,{id:"reliability-through-restarts",children:"Reliability Through Restarts"}),"\n",(0,r.jsx)(n.p,{children:"The service intentionally fails quickly on critical issues rather than attempting complex recovery. This design expects the service to run under systemd or a wrapper script that provides automatic restarts. Since configuration is applied on startup, restarts ensure the service remains operational even after encountering errors."}),"\n",(0,r.jsx)(n.h3,{id:"hot-reloading-with-graceful-restart",children:"Hot Reloading With Graceful Restart"}),"\n",(0,r.jsx)(n.p,{children:"For configuration changes, the service provides automatic hot reloading by watching configuration files. When hot reloading encounters issues, it gracefully falls back to the fail-fast behavior, prioritizing reliability over attempting risky recovery scenarios."}),"\n",(0,r.jsx)(n.h3,{id:"hyprland-native-integration",children:"Hyprland-Native Integration"}),"\n",(0,r.jsx)(n.p,{children:"The service leverages Hyprland's native abstractions rather than working directly with Wayland protocols. It detects the desired configuration based on current monitor state and power supply, then either:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Generates a templated Hyprland config file at the specified destination"}),"\n",(0,r.jsx)(n.li,{children:"Or creates a symlink to a user-provided static configuration file"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Hyprland automatically detects and applies these configuration changes (granted it's not explicitly turned off, if so you have to use ",(0,r.jsx)(n.a,{href:"./configuration/callbacks",children:"the callbacks"})," to ",(0,r.jsx)(n.code,{children:"hyprctl reload"}),"), ensuring seamless integration with the compositor's built-in configuration system."]}),"\n",(0,r.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,r.jsxs)(n.p,{children:["Ready to get started? Check out the ",(0,r.jsx)(n.a,{href:"./category/quick-start",children:"Quick Start"})," to set up HyprDynamicMonitors."]}),"\n",(0,r.jsx)(n.h2,{id:"runtime-requirements",children:"Runtime Requirements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Hyprland with IPC support"}),"\n",(0,r.jsx)(n.li,{children:"UPower (optional, for power state monitoring)"}),"\n",(0,r.jsx)(n.li,{children:"Read-only access to system D-Bus (optional for power state monitoring; should already be your default)"}),"\n",(0,r.jsx)(n.li,{children:"Write access to system D-Bus for notifications (optional; should already be your default)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"alternative-software",children:"Alternative Software"}),"\n",(0,r.jsxs)(n.p,{children:["Most similar tools are more generic, working with any Wayland compositor. In contrast, ",(0,r.jsx)(n.code,{children:"hyprdynamicmonitors"})," is specifically designed for Hyprland (using its IPC) but provides several advantages:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Advantages of HyprDynamicMonitors:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Interactive TUI"}),": Built-in terminal interface for visual monitor configuration and profile management"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Full configuration control"}),": Instead of introducing another configuration format, you work directly with Hyprland's native config syntax"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Template system"}),": Dynamic configuration generation based on connected monitors and power state"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Power state awareness"}),": Built-in AC/battery detection for laptop users"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event-driven automation"}),": Automatically responds to monitor connect/disconnect events"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Trade-offs:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Hyprland-specific (not generic Wayland)"}),"\n",(0,r.jsx)(n.li,{children:"Requires systemd or wrapper script for production use (fail-fast design)"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Similar Tools:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://sr.ht/~emersion/kanshi/",children:"kanshi"})," - Generic Wayland output management"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://github.com/hw0lff/shikane",children:"shikane"})," - Another Wayland output manager"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://github.com/nwg-piotr/nwg-displays",children:"nwg-displays"})," - GUI-based display configuration tool for Sway/Hyprland"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://github.com/erans/hyprmon",children:"hyprmon"})," - TUI-based display configuration tool for Hyprland"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);
"use strict";(globalThis.webpackChunkdocs=globalThis.webpackChunkdocs||[]).push([[5100],{4576:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"advanced/templates","title":"Templates","description":"Templates use Go template syntax for dynamic configuration generation based on connected monitors, power state, and lid state.","source":"@site/versioned_docs/version-v1.3.0/advanced/templates.md","sourceDirName":"advanced","slug":"/advanced/templates","permalink":"/hyprdynamicmonitors/docs/advanced/templates","draft":false,"unlisted":false,"editUrl":"https://github.com/fiffeek/hyprdynamicmonitors/tree/main/docs/versioned_docs/version-v1.3.0/advanced/templates.md","tags":[],"version":"v1.3.0","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Advanced","permalink":"/hyprdynamicmonitors/docs/category/advanced"},"next":{"title":"Running with systemd","permalink":"/hyprdynamicmonitors/docs/advanced/systemd"}}');var t=i(4848),s=i(8453);const l={sidebar_position:1},a="Templates",o={},d=[{value:"Template Variables",id:"template-variables",level:2},{value:".PowerState",id:"powerstate",level:3},{value:".LidState",id:"lidstate",level:3},{value:".Monitors",id:"monitors",level:3},{value:".ExtraMonitors",id:"extramonitors",level:3},{value:".RequiredMonitors",id:"requiredmonitors",level:3},{value:".MonitorsByTag",id:"monitorsbytag",level:3},{value:"Template Functions",id:"template-functions",level:2},{value:"isOnBattery",id:"isonbattery",level:3},{value:"isOnAC",id:"isonac",level:3},{value:"powerState",id:"powerstate-1",level:3},{value:"isLidClosed",id:"islidclosed",level:3},{value:"isLidOpened",id:"islidopened",level:3},{value:"Static Template Values",id:"static-template-values",level:2},{value:"Global Static Values",id:"global-static-values",level:3},{value:"Per-Profile Static Values",id:"per-profile-static-values",level:3},{value:"Using in Templates",id:"using-in-templates",level:3},{value:"Complete Examples",id:"complete-examples",level:2},{value:"Power-Aware Dual Monitor",id:"power-aware-dual-monitor",level:3},{value:"Lid-Aware Docked Setup",id:"lid-aware-docked-setup",level:3},{value:"Disable Extra Monitors",id:"disable-extra-monitors",level:3},{value:"Combined Power and Lid State",id:"combined-power-and-lid-state",level:3},{value:"Whitespace Control",id:"whitespace-control",level:2},{value:"Testing Templates",id:"testing-templates",level:2},{value:"Creating Initial Templates",id:"creating-initial-templates",level:3},{value:"See Also",id:"see-also",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"templates",children:"Templates"})}),"\n",(0,t.jsx)(n.p,{children:"Templates use Go template syntax for dynamic configuration generation based on connected monitors, power state, and lid state."}),"\n",(0,t.jsx)(n.h2,{id:"template-variables",children:"Template Variables"}),"\n",(0,t.jsx)(n.p,{children:"The following variables are available in all templates:"}),"\n",(0,t.jsx)(n.h3,{id:"powerstate",children:".PowerState"}),"\n",(0,t.jsxs)(n.p,{children:["Current power state: ",(0,t.jsx)(n.code,{children:'"AC"'})," or ",(0,t.jsx)(n.code,{children:'"BAT"'})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'{{.PowerState}}  # Returns "AC" or "BAT"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"lidstate",children:".LidState"}),"\n",(0,t.jsxs)(n.p,{children:["Current lid state: ",(0,t.jsx)(n.code,{children:'"UNKNOWN"'}),", ",(0,t.jsx)(n.code,{children:'"Closed"'}),", or ",(0,t.jsx)(n.code,{children:'"Opened"'})]}),"\n",(0,t.jsxs)(n.p,{children:["Requires ",(0,t.jsx)(n.code,{children:"--enable-lid-events"})," flag to be set."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'{{.LidState}}  # Returns "UNKNOWN", "Closed", or "Opened"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"monitors",children:".Monitors"}),"\n",(0,t.jsx)(n.p,{children:"Array of all connected monitors."}),"\n",(0,t.jsx)(n.p,{children:"Each monitor object has the following fields:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Name"})}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:'Monitor connector name (e.g., "eDP-1", "DP-1")'})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"ID"})}),(0,t.jsx)(n.td,{children:"int"}),(0,t.jsx)(n.td,{children:"Monitor ID"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Description"})}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"Monitor model/manufacturer string"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Disabled"})}),(0,t.jsx)(n.td,{children:"bool"}),(0,t.jsx)(n.td,{children:"Whether the monitor is disabled"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"AvailableModes"})}),(0,t.jsx)(n.td,{children:"[]string"}),(0,t.jsx)(n.td,{children:"List of available display modes"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Mirror"})}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"Name of monitor this one mirrors (empty if not mirroring)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"CurrentFormat"})}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"Current display mode/format"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"DpmsStatus"})}),(0,t.jsx)(n.td,{children:"bool"}),(0,t.jsx)(n.td,{children:"DPMS (power management) status"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"ActivelyTearing"})}),(0,t.jsx)(n.td,{children:"bool"}),(0,t.jsx)(n.td,{children:"Whether the monitor is actively tearing"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"DirectScanoutTo"})}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"Direct scanout target"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Solitary"})}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"Solitary mode status"})]})]})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"{{range .Monitors}}\n# Monitor: {{.Name}} ({{.Description}})\n# Current format: {{.CurrentFormat}}\n# Disabled: {{.Disabled}}\n{{end}}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"extramonitors",children:".ExtraMonitors"}),"\n",(0,t.jsxs)(n.p,{children:["Array of connected monitors ",(0,t.jsx)(n.strong,{children:"not defined"})," in the profile's required monitors."]}),"\n",(0,t.jsxs)(n.p,{children:["Each monitor object has the same fields as ",(0,t.jsx)(n.code,{children:".Monitors"})," (see above)."]}),"\n",(0,t.jsx)(n.p,{children:"Useful for disabling unexpected monitors:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"{{range .ExtraMonitors}}\nmonitor={{.Name}},disable\n{{end}}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"requiredmonitors",children:".RequiredMonitors"}),"\n",(0,t.jsxs)(n.p,{children:["Array of connected monitors that ",(0,t.jsx)(n.strong,{children:"are defined"})," in the profile's required monitors."]}),"\n",(0,t.jsxs)(n.p,{children:["Each monitor object has the same fields as ",(0,t.jsx)(n.code,{children:".Monitors"})," (see above)."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"{{range .RequiredMonitors}}\n# Required monitor: {{.Name}} ({{.Description}})\nmonitor={{.Name}},{{.CurrentFormat}},auto,1\n{{end}}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"monitorsbytag",children:".MonitorsByTag"}),"\n",(0,t.jsx)(n.p,{children:"Map of tagged monitors (monitor_tag -> monitor object)."}),"\n",(0,t.jsxs)(n.p,{children:["Each monitor object has the same fields as ",(0,t.jsx)(n.code,{children:".Monitors"})," (see above)."]}),"\n",(0,t.jsx)(n.p,{children:"This is the most convenient way to reference specific monitors in templates:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'{{- $laptop := index .MonitorsByTag "laptop" -}}\n{{- $external := index .MonitorsByTag "external" -}}\n\nmonitor={{$laptop.Name}},2880x1920@120,0x0,2.0\nmonitor={{$external.Name}},preferred,auto,1\n# External monitor description: {{$external.Description}}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"template-functions",children:"Template Functions"}),"\n",(0,t.jsx)(n.h3,{id:"isonbattery",children:"isOnBattery"}),"\n",(0,t.jsx)(n.p,{children:"Returns true if on battery power."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"{{if isOnBattery}}\n# Low power configuration\nmonitor=eDP-1,1920x1080@60,0x0,2.0\n{{end}}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"isonac",children:"isOnAC"}),"\n",(0,t.jsx)(n.p,{children:"Returns true if on AC power."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"{{if isOnAC}}\n# High performance configuration\nmonitor=eDP-1,2880x1920@120,0x0,2.0\n{{end}}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"powerstate-1",children:"powerState"}),"\n",(0,t.jsxs)(n.p,{children:["Returns the current power state string (",(0,t.jsx)(n.code,{children:'"AC"'})," or ",(0,t.jsx)(n.code,{children:'"BAT"'}),")."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"# Current power state: {{powerState}}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"islidclosed",children:"isLidClosed"}),"\n",(0,t.jsx)(n.p,{children:"Returns true if the lid is closed."}),"\n",(0,t.jsxs)(n.p,{children:["Requires ",(0,t.jsx)(n.code,{children:"--enable-lid-events"})," flag."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"{{if isLidClosed}}\nmonitor=eDP-1,disable\n{{end}}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"islidopened",children:"isLidOpened"}),"\n",(0,t.jsx)(n.p,{children:"Returns true if the lid is opened."}),"\n",(0,t.jsxs)(n.p,{children:["Requires ",(0,t.jsx)(n.code,{children:"--enable-lid-events"})," flag."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"{{if isLidOpened}}\nmonitor=eDP-1,2880x1920@120,0x0,2.0\n{{end}}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"static-template-values",children:"Static Template Values"}),"\n",(0,t.jsx)(n.p,{children:"Define custom values that are available in templates:"}),"\n",(0,t.jsx)(n.h3,{id:"global-static-values",children:"Global Static Values"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[static_template_values]\ndefault_vrr = "1"\ndefault_res = "2880x1920"\nrefresh_rate_high = "120.00000"\nrefresh_rate_low = "60.00000"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"per-profile-static-values",children:"Per-Profile Static Values"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[profiles.laptop_only.static_template_values]\ndefault_vrr = "0"        # Override global value\nbattery_scaling = "1.5"  # Profile-specific value\n'})}),"\n",(0,t.jsx)(n.h3,{id:"using-in-templates",children:"Using in Templates"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"monitor=eDP-1,{{.default_res}}@{{.refresh_rate_high}},0x0,1,vrr,{{.default_vrr}}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"complete-examples",children:"Complete Examples"}),"\n",(0,t.jsx)(n.h3,{id:"power-aware-dual-monitor",children:"Power-Aware Dual Monitor"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'{{- $laptop := index .MonitorsByTag "laptop" -}}\n{{- $external := index .MonitorsByTag "external" -}}\n\n{{if isOnAC}}\n# AC Power: High performance\nmonitor={{$laptop.Name}},2880x1920@120,0x0,2.0\nmonitor={{$external.Name}},3840x2160@60,2880x0,1\n{{else}}\n# Battery: Power saving\nmonitor={{$laptop.Name}},1920x1080@60,0x0,2.0\nmonitor={{$external.Name}},2560x1440@60,1920x0,1\n{{end}}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"lid-aware-docked-setup",children:"Lid-Aware Docked Setup"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'{{- $laptop := index .MonitorsByTag "laptop" -}}\n{{- $external := index .MonitorsByTag "external" -}}\n\n{{if isLidClosed}}\n# Lid closed: external monitor only\nmonitor={{$laptop.Name}},disable\nmonitor={{$external.Name}},preferred,0x0,1\n{{else}}\n# Lid open: dual monitor\nmonitor={{$laptop.Name}},2880x1920@120,0x0,2.0\nmonitor={{$external.Name}},preferred,{{$laptop.Width}}x0,1\n{{end}}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"disable-extra-monitors",children:"Disable Extra Monitors"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"{{- range .RequiredMonitors}}\nmonitor={{.Name}},preferred,auto,1\n{{- end}}\n\n{{- range .ExtraMonitors}}\n# Disable unexpected monitor\nmonitor={{.Name}},disable\n{{- end}}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"combined-power-and-lid-state",children:"Combined Power and Lid State"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'{{- $laptop := index .MonitorsByTag "laptop" -}}\n\n{{if isLidClosed}}\nmonitor={{$laptop.Name}},disable\n{{else if isOnAC}}\nmonitor={{$laptop.Name}},2880x1920@120,0x0,2.0,vrr,1\n{{else}}\nmonitor={{$laptop.Name}},1920x1080@60,0x0,2.0,vrr,0\n{{end}}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"whitespace-control",children:"Whitespace Control"}),"\n",(0,t.jsxs)(n.p,{children:["Go templates support whitespace trimming using ",(0,t.jsx)(n.code,{children:"-"})," in template delimiters:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'{{- $laptop := index .MonitorsByTag "laptop" -}}\n# This removes trailing whitespace/newlines after the action\n\n{{- $external := index .MonitorsByTag "external" }}\n# This keeps the newline after the action\n'})}),"\n",(0,t.jsx)(n.admonition,{title:"Common Issue",type:"caution",children:(0,t.jsxs)(n.p,{children:["Using ",(0,t.jsx)(n.code,{children:"-}}"})," at the end of the last variable definition before your configuration can cause the next line to merge with the comment above it. See ",(0,t.jsx)(n.a,{href:"../faq#why-are-my-comments-becoming-part-of-the-configuration-in-templates",children:"FAQ - Comments in Templates"})," for solutions."]})}),"\n",(0,t.jsx)(n.h2,{id:"testing-templates",children:"Testing Templates"}),"\n",(0,t.jsx)(n.p,{children:"After creating or modifying a template, test it by reloading the configuration:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Trigger a configuration reload\nkill -SIGHUP $(pidof hyprdynamicmonitors)\n\n# Or if using systemd\nsystemctl --user reload hyprdynamicmonitors\n"})}),"\n",(0,t.jsx)(n.p,{children:"Then check:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Service logs"})," to see if the template rendered successfully:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# If using systemd\njournalctl --user -u hyprdynamicmonitors -f\n\n# Or with --debug flag for more details\nhyprdynamicmonitors --debug run\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Destination file"})," to verify the rendered output:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cat ~/.config/hypr/monitors.conf\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"creating-initial-templates",children:"Creating Initial Templates"}),"\n",(0,t.jsxs)(n.p,{children:["Use the ",(0,t.jsx)(n.code,{children:"freeze"})," command to capture your current setup as a starting point:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"hyprdynamicmonitors freeze --profile-name my-setup\n"})}),"\n",(0,t.jsx)(n.p,{children:"This generates a template from your current monitor configuration that you can then customize."}),"\n",(0,t.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"../configuration/profiles",children:"Profiles"})," - Configure profiles with templates"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"../configuration/monitor-matching",children:"Monitor Matching"})," - Using monitor tags"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/fiffeek/hyprdynamicmonitors/tree/main/examples/template-variables",children:"Examples - Template Variables"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/fiffeek/hyprdynamicmonitors/tree/main/examples/disable-monitors",children:"Examples - Disable Monitors"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var r=i(6540);const t={},s=r.createContext(t);function l(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);
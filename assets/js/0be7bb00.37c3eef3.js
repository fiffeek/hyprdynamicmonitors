"use strict";(globalThis.webpackChunkdocs=globalThis.webpackChunkdocs||[]).push([[3633],{6257:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"configuration/lid-events","title":"Lid Events","description":"Lid state monitoring uses D-Bus to listen for UPower lid events. This feature is optional and needs to be explicitly enabled.","source":"@site/versioned_docs/version-v1.3.0/configuration/lid-events.md","sourceDirName":"configuration","slug":"/configuration/lid-events","permalink":"/docs/configuration/lid-events","draft":false,"unlisted":false,"editUrl":"https://github.com/fiffeek/hyprdynamicmonitors/tree/main/docs/versioned_docs/version-v1.3.0/configuration/lid-events.md","tags":[],"version":"v1.3.0","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Callbacks","permalink":"/docs/configuration/callbacks"},"next":{"title":"Advanced","permalink":"/docs/category/advanced"}}');var t=s(4848),r=s(8453);const d={sidebar_position:7},o="Lid Events",l={},a=[{value:"Enabling Lid Events",id:"enabling-lid-events",level:2},{value:"Default Configuration",id:"default-configuration",level:2},{value:"Monitoring Lid Events",id:"monitoring-lid-events",level:3},{value:"Querying Lid Status",id:"querying-lid-status",level:2},{value:"Custom D-Bus Configuration",id:"custom-d-bus-configuration",level:2},{value:"Custom Signal Match Rules",id:"custom-signal-match-rules",level:3},{value:"Custom Query Configuration",id:"custom-query-configuration",level:3},{value:"Receive Filters",id:"receive-filters",level:2},{value:"Using Lid State",id:"using-lid-state",level:2},{value:"Lid State Values",id:"lid-state-values",level:2},{value:"Common Use Cases",id:"common-use-cases",level:2},{value:"Disable Laptop Screen When Docked with Lid Closed",id:"disable-laptop-screen-when-docked-with-lid-closed",level:3},{value:"Different Layouts Based on Lid State",id:"different-layouts-based-on-lid-state",level:3},{value:"See Also",id:"see-also",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"lid-events",children:"Lid Events"})}),"\n",(0,t.jsx)(n.p,{children:"Lid state monitoring uses D-Bus to listen for UPower lid events. This feature is optional and needs to be explicitly enabled."}),"\n",(0,t.jsx)(n.h2,{id:"enabling-lid-events",children:"Enabling Lid Events"}),"\n",(0,t.jsx)(n.p,{children:"To enable lid state monitoring:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"hyprdynamicmonitors run --enable-lid-events\n"})}),"\n",(0,t.jsx)(n.p,{children:"When disabled (default):"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The system defaults to ",(0,t.jsx)(n.code,{children:"UNKNOWN"})," lid state"]}),"\n",(0,t.jsx)(n.li,{children:"No lid events will be delivered"}),"\n",(0,t.jsx)(n.li,{children:"No D-Bus connection for lid events will be made"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"default-configuration",children:"Default Configuration"}),"\n",(0,t.jsx)(n.p,{children:"By default, when enabled, the service listens for D-Bus signals:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Signal"}),": ",(0,t.jsx)(n.code,{children:"org.freedesktop.DBus.Properties.PropertiesChanged"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Interface"}),": ",(0,t.jsx)(n.code,{children:"org.freedesktop.DBus.Properties"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Member"}),": ",(0,t.jsx)(n.code,{children:"PropertiesChanged"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Path"}),": ",(0,t.jsx)(n.code,{children:"/org/freedesktop/UPower"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"monitoring-lid-events",children:"Monitoring Lid Events"}),"\n",(0,t.jsx)(n.p,{children:"You can monitor lid events with:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"gdbus monitor --system --dest org.freedesktop.UPower --object-path /org/freedesktop/UPower\n"})}),"\n",(0,t.jsx)(n.p,{children:"Example output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"/org/freedesktop/UPower: org.freedesktop.DBus.Properties.PropertiesChanged ('org.freedesktop.UPower', {'LidIsClosed': <true>}, @as [])\n/org/freedesktop/UPower: org.freedesktop.DBus.Properties.PropertiesChanged ('org.freedesktop.UPower', {'LidIsClosed': <false>}, @as [])\n"})}),"\n",(0,t.jsx)(n.h2,{id:"querying-lid-status",children:"Querying Lid Status"}),"\n",(0,t.jsx)(n.p,{children:"On each event, the current lid status is queried. Equivalent command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"dbus-send --system --print-reply \\\n  --dest=org.freedesktop.UPower /org/freedesktop/UPower \\\n  org.freedesktop.DBus.Properties.Get \\\n  string:org.freedesktop.UPower string:LidIsClosed\n"})}),"\n",(0,t.jsx)(n.h2,{id:"custom-d-bus-configuration",children:"Custom D-Bus Configuration"}),"\n",(0,t.jsx)(n.h3,{id:"custom-signal-match-rules",children:"Custom Signal Match Rules"}),"\n",(0,t.jsx)(n.p,{children:"You can customize which D-Bus signals to monitor for lid events:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[lid_events]\n[[lid_events.dbus_signal_match_rules]]\ninterface = "org.freedesktop.DBus.Properties"\nmember = "PropertiesChanged"\nobject_path = "/org/freedesktop/UPower"\n# sender = "org.freedesktop.UPower"  # Optional: specific sender\n\n[[lid_events.dbus_signal_receive_filters]]\nname = "org.freedesktop.DBus.Properties.PropertiesChanged"\nbody = "LidIsClosed"  # Filter signals containing this in the body\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"body"})," filter is useful for limiting the signals processed, as D-Bus property change events can be noisy."]}),"\n",(0,t.jsx)(n.h3,{id:"custom-query-configuration",children:"Custom Query Configuration"}),"\n",(0,t.jsx)(n.p,{children:"You can customize how lid state is queried:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[lid_events.dbus_query_object]\ndestination = "org.freedesktop.UPower"\npath = "/org/freedesktop/UPower"\nmethod = "org.freedesktop.DBus.Properties.Get"\nexpected_lid_closing_value = "true"\n\n[[lid_events.dbus_query_object.args]]\narg = "org.freedesktop.UPower"\n\n[[lid_events.dbus_query_object.args]]\narg = "LidIsClosed"\n'})}),"\n",(0,t.jsx)(n.p,{children:"This configuration is equivalent to the default and queries the lid state using standard UPower D-Bus properties."}),"\n",(0,t.jsxs)(n.p,{children:["See the ",(0,t.jsx)(n.a,{href:"https://github.com/fiffeek/hyprdynamicmonitors/tree/main/examples/lid-states",children:"lid-states example"})," for a complete configuration."]}),"\n",(0,t.jsx)(n.h2,{id:"receive-filters",children:"Receive Filters"}),"\n",(0,t.jsx)(n.p,{children:"By default, the service matches:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"org.freedesktop.DBus.Properties.PropertiesChanged"})," name"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"LidIsClosed"})," body"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This prevents noisy signals. Lid status changes are only propagated when the state actually changes."}),"\n",(0,t.jsx)(n.h2,{id:"using-lid-state",children:"Using Lid State"}),"\n",(0,t.jsx)(n.p,{children:"Lid state is available in templates via functions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"{{if isLidClosed}}\n# Disable laptop screen when lid is closed\nmonitor=eDP-1,disable\n{{else}}\nmonitor=eDP-1,2880x1920@120,0x0,2.0\n{{end}}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Available template functions:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"isLidClosed"})," - Returns true if the lid is closed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"isLidOpened"})," - Returns true if the lid is opened"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:".LidState"})," - Returns the lid state string (",(0,t.jsx)(n.code,{children:'"Closed"'}),", ",(0,t.jsx)(n.code,{children:'"Opened"'}),", or ",(0,t.jsx)(n.code,{children:'"UNKNOWN"'}),")"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"lid-state-values",children:"Lid State Values"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:".LidState"})," variable can have these values:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"UNKNOWN"'})," - Lid events are disabled or state cannot be determined"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"Closed"'})," - Lid is closed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"Opened"'})," - Lid is open"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,t.jsx)(n.h3,{id:"disable-laptop-screen-when-docked-with-lid-closed",children:"Disable Laptop Screen When Docked with Lid Closed"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'{{- $laptop := index .MonitorsByTag "laptop" -}}\n{{- $external := index .MonitorsByTag "external" -}}\n\n{{if isLidClosed}}\nmonitor={{$laptop.Name}},disable\n{{else}}\nmonitor={{$laptop.Name}},2880x1920@120,0x0,2.0\n{{end}}\n\nmonitor={{$external.Name}},preferred,auto,1\n'})}),"\n",(0,t.jsx)(n.h3,{id:"different-layouts-based-on-lid-state",children:"Different Layouts Based on Lid State"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"{{if isLidClosed}}\n# Closed lid: external monitor only\nmonitor=eDP-1,disable\nmonitor=DP-1,3840x2160@60,0x0,1\n{{else}}\n# Open lid: dual monitor setup\nmonitor=eDP-1,2880x1920@120,0x0,2.0\nmonitor=DP-1,3840x2160@60,2880x0,1\n{{end}}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"../advanced/templates",children:"Templates"})," - Template syntax and variables"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./power-events",children:"Power Events"})," - Similar D-Bus event system"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/fiffeek/hyprdynamicmonitors/tree/main/examples/lid-states",children:"Examples - Lid States"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>o});var i=s(6540);const t={},r=i.createContext(t);function d(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);
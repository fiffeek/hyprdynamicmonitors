"use strict";(globalThis.webpackChunkdocs=globalThis.webpackChunkdocs||[]).push([[7456],{7528:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"development","title":"Development","description":"This guide covers setting up a development environment and contributing to HyprDynamicMonitors.","source":"@site/versioned_docs/version-v1.3.2/development.md","sourceDirName":".","slug":"/development","permalink":"/docs/v1.3.2/development","draft":false,"unlisted":false,"editUrl":"https://github.com/fiffeek/hyprdynamicmonitors/tree/main/docs/versioned_docs/version-v1.3.2/development.md","tags":[],"version":"v1.3.2","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"FAQ","permalink":"/docs/v1.3.2/faq"}}');var t=i(4848),l=i(8453);const r={sidebar_position:8},a="Development",o={},d=[{value:"Setup Development Environment",id:"setup-development-environment",level:2},{value:"Development Commands",id:"development-commands",level:2},{value:"Code Quality and Testing",id:"code-quality-and-testing",level:3},{value:"Testing Specific Areas",id:"testing-specific-areas",level:3},{value:"Running Selected Tests",id:"running-selected-tests",level:3},{value:"Building",id:"building",level:3},{value:"Documentation",id:"documentation",level:3},{value:"Recording Demos and Previews",id:"recording-demos-and-previews",level:3},{value:"Nix Support (Experimental)",id:"nix-support-experimental",level:3},{value:"Development Workflow",id:"development-workflow",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"Testing",id:"testing",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"Test Fixtures",id:"test-fixtures",level:3},{value:"Contributing",id:"contributing",level:2},{value:"Commit Messages",id:"commit-messages",level:3},{value:"Pull Requests",id:"pull-requests",level:3},{value:"Code Style",id:"code-style",level:3},{value:"Release Process",id:"release-process",level:2},{value:"Release Candidates",id:"release-candidates",level:3},{value:"Versioning",id:"versioning",level:3},{value:"Build System",id:"build-system",level:2},{value:"Key Targets",id:"key-targets",level:3},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Examples",id:"examples",level:3},{value:"Debugging",id:"debugging",level:2},{value:"Enable Debug Logging",id:"enable-debug-logging",level:3},{value:"Enable Verbose Logging",id:"enable-verbose-logging",level:3},{value:"Structured Logging",id:"structured-logging",level:3},{value:"Dry Run Mode",id:"dry-run-mode",level:3},{value:"Resources",id:"resources",level:2},{value:"See Also",id:"see-also",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"development",children:"Development"})}),"\n",(0,t.jsx)(n.p,{children:"This guide covers setting up a development environment and contributing to HyprDynamicMonitors."}),"\n",(0,t.jsx)(n.h2,{id:"setup-development-environment",children:"Setup Development Environment"}),"\n",(0,t.jsx)(n.p,{children:"Set up the complete development environment with all dependencies:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"make dev\n"})}),"\n",(0,t.jsx)(n.p,{children:"This installs:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"asdf version manager with required tool versions"}),"\n",(0,t.jsx)(n.li,{children:"Go toolchain and dependencies"}),"\n",(0,t.jsx)(n.li,{children:"Python virtual environment for pre-commit hooks"}),"\n",(0,t.jsx)(n.li,{children:"Node.js dependencies for commit linting"}),"\n",(0,t.jsx)(n.li,{children:"Pre-commit hooks configuration"}),"\n",(0,t.jsx)(n.li,{children:"Documentation generation tools"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"development-commands",children:"Development Commands"}),"\n",(0,t.jsx)(n.p,{children:"To see all available commands, run:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"make help\n"})}),"\n",(0,t.jsx)(n.h3,{id:"code-quality-and-testing",children:"Code Quality and Testing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"make fmt          # Format code and tidy modules\nmake lint         # Run linting checks\nmake test         # Run all tests (unit + integration)\nmake pre-push     # Run complete CI pipeline (fmt + lint + test)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"testing-specific-areas",children:"Testing Specific Areas"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"make test/unit                    # Run only unit tests\nmake test/integration             # Run only integration tests\nmake test/integration/regenerate  # Regenerate test fixtures\nmake test/tui/flows               # Run TUI flow tests\nmake test/tui/flows/regenerate    # Regenerate TUI flow test fixtures\nmake coverage                     # Generate coverage report (coverage.html)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"running-selected-tests",children:"Running Selected Tests"}),"\n",(0,t.jsxs)(n.p,{children:["Runs with ",(0,t.jsx)(n.code,{children:"-debug"})," for log output:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Run subset of integration tests\nmake TEST_SELECTOR=Test__Run_Binary/power_events_triggers test/integration/selected\n\n# Run subset of unit tests\nmake TEST_SELECTOR="TestIPC_Run/happy_path$" PACKAGE_SELECTOR=hypr/... test/unit/selected\n\n# Regenerate specific test fixtures\nmake TEST_SELECTOR="TestIPC_Run" PACKAGE_SELECTOR=hypr/... test/unit/selected/regenerate\n'})}),"\n",(0,t.jsx)(n.h3,{id:"building",children:"Building"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"make release/local       # Build release binaries for all platforms\nmake release/local/rc    # Build release candidate binaries\nmake build/test          # Build test binary with coverage for integration tests\nmake build/docs          # Build binary for documentation generation\n"})}),"\n",(0,t.jsx)(n.h3,{id:"documentation",children:"Documentation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"make docs             # Start documentation development server\nmake help/generate    # Generate help documentation from binary\nmake toc/generate     # Generate table of contents for markdown files\n"})}),"\n",(0,t.jsx)(n.h3,{id:"recording-demos-and-previews",children:"Recording Demos and Previews"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"make demo                              # Record demo preview (requires vhs)\nmake record/preview RECORD_TARGET=demo # Record specific preview tape\nmake record/previews                   # Record all preview tapes\n"})}),"\n",(0,t.jsx)(n.h3,{id:"nix-support-experimental",children:"Nix Support (Experimental)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"make nix/build/module        # Build NixOS module VM\nmake nix/build/homemanager   # Build home-manager VM\nmake nix/run/module          # Run NixOS module VM\nmake nix/run/homemanager     # Run home-manager VM\n"})}),"\n",(0,t.jsx)(n.h2,{id:"development-workflow",children:"Development Workflow"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Initial setup"}),": ",(0,t.jsx)(n.code,{children:"make dev"})," (one-time setup)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Development cycle"}),": Make changes, then run ",(0,t.jsx)(n.code,{children:"make pre-push"})," before committing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Testing"}),": Use ",(0,t.jsx)(n.code,{children:"make test"})," for full test suite, or specific test targets for focused testing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Pre-commit hooks"}),": Automatically run on commit (installed by ",(0,t.jsx)(n.code,{children:"make dev"}),")"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"hyprdynamicmonitors/\n\u251c\u2500\u2500 cmd/                      # Command-line interface\n\u251c\u2500\u2500 internal/                 # Internal packages\n\u2502   \u251c\u2500\u2500 app/                 # Application core\n\u2502   \u251c\u2500\u2500 config/              # Configuration handling\n\u2502   \u251c\u2500\u2500 dial/                # Connection dialing utilities\n\u2502   \u251c\u2500\u2500 filewatcher/         # File watching for config changes\n\u2502   \u251c\u2500\u2500 generators/          # Code/config generators\n\u2502   \u251c\u2500\u2500 hypr/                # Hyprland IPC integration\n\u2502   \u251c\u2500\u2500 matchers/            # Monitor matching logic\n\u2502   \u251c\u2500\u2500 notifications/       # Desktop notifications\n\u2502   \u251c\u2500\u2500 power/               # Power event handling\n\u2502   \u251c\u2500\u2500 profilemaker/        # Profile creation and management\n\u2502   \u251c\u2500\u2500 reloader/            # Configuration reloading\n\u2502   \u251c\u2500\u2500 signal/              # Signal handling\n\u2502   \u251c\u2500\u2500 testutils/           # Testing utilities\n\u2502   \u251c\u2500\u2500 tui/                 # Terminal UI (Bubble Tea)\n\u2502   \u251c\u2500\u2500 userconfigupdater/   # User configuration updates\n\u2502   \u2514\u2500\u2500 utils/               # Shared utilities\n\u251c\u2500\u2500 examples/                 # Example configurations\n\u2502   \u251c\u2500\u2500 basic/               # Basic configuration examples\n\u2502   \u251c\u2500\u2500 callbacks/           # Callback examples\n\u2502   \u251c\u2500\u2500 disable-monitors/    # Monitor disabling examples\n\u2502   \u251c\u2500\u2500 fallback/            # Fallback configuration\n\u2502   \u251c\u2500\u2500 full/                # Complete configuration example\n\u2502   \u251c\u2500\u2500 lid-states/          # Laptop lid state handling\n\u2502   \u251c\u2500\u2500 minimal/             # Minimal configuration\n\u2502   \u251c\u2500\u2500 power-states/        # Power state examples\n\u2502   \u251c\u2500\u2500 scoring/             # Monitor scoring examples\n\u2502   \u2514\u2500\u2500 template-variables/  # Template variable usage\n\u251c\u2500\u2500 test/                     # Integration tests\n\u2502   \u2514\u2500\u2500 testdata/            # Test fixtures and data\n\u251c\u2500\u2500 docs/                     # Docusaurus documentation\n\u2502   \u251c\u2500\u2500 docs/                # Documentation content\n\u2502   \u251c\u2500\u2500 src/                 # Documentation site source\n\u2502   \u251c\u2500\u2500 static/              # Static assets\n\u2502   \u2514\u2500\u2500 versioned_docs/      # Versioned documentation\n\u251c\u2500\u2500 scripts/                  # Build and utility scripts\n\u251c\u2500\u2500 infrastructure/           # Infrastructure configs\n\u2502   \u2514\u2500\u2500 systemd/             # Systemd service files\n\u251c\u2500\u2500 nix/                      # Nix configuration\n\u2502   \u251c\u2500\u2500 homemanager/         # Home Manager integration\n\u2502   \u2514\u2500\u2500 module/              # NixOS module\n\u251c\u2500\u2500 preview/                  # Preview/demo recordings\n\u2502   \u251c\u2500\u2500 output/              # Generated preview output\n\u2502   \u2514\u2500\u2500 tapes/               # VHS tape files for recordings\n\u2514\u2500\u2500 bin/                      # Development binaries\n"})}),"\n",(0,t.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,t.jsx)(n.h3,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,t.jsx)(n.p,{children:"Located within the relevant packages:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"make test/unit\n"})}),"\n",(0,t.jsx)(n.h3,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,t.jsxs)(n.p,{children:["Located in ",(0,t.jsx)(n.code,{children:"test/"})," directory. These build the binary and verify expected outputs:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"make test/integration\n"})}),"\n",(0,t.jsx)(n.h3,{id:"test-fixtures",children:"Test Fixtures"}),"\n",(0,t.jsx)(n.p,{children:"Integration tests use fixtures that can be regenerated:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"make test/integration/regenerate\n"})}),"\n",(0,t.jsx)(n.h2,{id:"contributing",children:"Contributing"}),"\n",(0,t.jsx)(n.h3,{id:"commit-messages",children:"Commit Messages"}),"\n",(0,t.jsxs)(n.p,{children:["The project uses ",(0,t.jsx)(n.a,{href:"https://www.conventionalcommits.org/",children:"Conventional Commits"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"feat: add support for custom monitor tags\nfix: resolve template rendering issue\ndocs: update TUI documentation\ntest: add integration test for power events\nchore: update dependencies\n"})}),"\n",(0,t.jsx)(n.p,{children:"Pre-commit hooks will validate commit message format."}),"\n",(0,t.jsx)(n.h3,{id:"pull-requests",children:"Pull Requests"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Fork the repository"}),"\n",(0,t.jsxs)(n.li,{children:["Create a feature branch: ",(0,t.jsx)(n.code,{children:"git checkout -b feat/my-feature"})]}),"\n",(0,t.jsx)(n.li,{children:"Make your changes"}),"\n",(0,t.jsxs)(n.li,{children:["Run ",(0,t.jsx)(n.code,{children:"make pre-push"})," to ensure all checks pass"]}),"\n",(0,t.jsx)(n.li,{children:"Commit with conventional commit messages"}),"\n",(0,t.jsxs)(n.li,{children:["Push to your fork: ",(0,t.jsx)(n.code,{children:"git push origin feat/my-feature"})]}),"\n",(0,t.jsx)(n.li,{children:"Create a pull request"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"code-style",children:"Code Style"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"gofmt"})," for formatting (automatically applied by ",(0,t.jsx)(n.code,{children:"make fmt"}),")"]}),"\n",(0,t.jsx)(n.li,{children:"Follow Go best practices"}),"\n",(0,t.jsx)(n.li,{children:"Add tests for new functionality"}),"\n",(0,t.jsx)(n.li,{children:"Update documentation as needed"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"release-process",children:"Release Process"}),"\n",(0,t.jsx)(n.h3,{id:"release-candidates",children:"Release Candidates"}),"\n",(0,t.jsx)(n.p,{children:"Release candidates are published for testing new features:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"GitHub Releases"}),": RC versions are marked as pre-releases (e.g., ",(0,t.jsx)(n.code,{children:"v0.2.0-rc1"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"AUR Package"}),": Available as ",(0,t.jsx)(n.code,{children:"hyprdynamicmonitors-rc-bin"})," alongside stable ",(0,t.jsx)(n.code,{children:"hyprdynamicmonitors-bin"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Binary Name"}),": RC builds use ",(0,t.jsx)(n.code,{children:"hyprdynamicmonitors-rc"})," to avoid conflicts"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Parallel Installation"}),": Both stable and RC versions can be installed simultaneously"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"To install the RC version from AUR:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"yay -S hyprdynamicmonitors-rc-bin\n"})}),"\n",(0,t.jsx)(n.h3,{id:"versioning",children:"Versioning"}),"\n",(0,t.jsxs)(n.p,{children:["The project follows ",(0,t.jsx)(n.a,{href:"https://semver.org/",children:"Semantic Versioning"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"MAJOR"}),": Incompatible API changes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"MINOR"}),": New functionality in a backwards compatible manner"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"PATCH"}),": Backwards compatible bug fixes"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"build-system",children:"Build System"}),"\n",(0,t.jsxs)(n.p,{children:["The project uses Make for build automation. Run ",(0,t.jsx)(n.code,{children:"make help"})," to see all available targets."]}),"\n",(0,t.jsx)(n.h3,{id:"key-targets",children:"Key Targets"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"make help             # Display all available targets and usage\nmake dev              # Setup development environment\nmake install          # Install to DESTDIR (default: ~/.local/bin)\nmake uninstall        # Uninstall from DESTDIR\nmake test             # Run all tests\nmake lint             # Run linters\nmake fmt              # Format code\nmake pre-push         # Run complete CI pipeline\n"})}),"\n",(0,t.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"DESTDIR"}),": Installation directory (default: ",(0,t.jsx)(n.code,{children:"~/.local/bin"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"TEST_SELECTOR"}),": Pattern to select specific tests"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"PACKAGE_SELECTOR"}),": Package pattern for unit tests (default: ",(0,t.jsx)(n.code,{children:"..."}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"RECORD_TARGET"}),": Preview tape to record (default: ",(0,t.jsx)(n.code,{children:"demo"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"TUI_FLOWS"}),": TUI flow test to run (default: ",(0,t.jsx)(n.code,{children:"TestModel_Update_UserFlows"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"VHS_BIN"}),": Path to vhs binary for recording previews (default: ",(0,t.jsx)(n.code,{children:"vhs"}),")"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Run specific unit tests\nmake TEST_SELECTOR='TestIPC_Run/happy_path$' PACKAGE_SELECTOR=hypr/... test/unit/selected\n\n# Run specific integration tests\nmake TEST_SELECTOR=Test__Run_Binary/power_events test/integration/selected\n\n# Record a specific preview\nmake record/preview RECORD_TARGET=demo\n"})}),"\n",(0,t.jsx)(n.h2,{id:"debugging",children:"Debugging"}),"\n",(0,t.jsx)(n.h3,{id:"enable-debug-logging",children:"Enable Debug Logging"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"hyprdynamicmonitors --debug run\n"})}),"\n",(0,t.jsx)(n.h3,{id:"enable-verbose-logging",children:"Enable Verbose Logging"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"hyprdynamicmonitors --verbose run\n"})}),"\n",(0,t.jsx)(n.h3,{id:"structured-logging",children:"Structured Logging"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"hyprdynamicmonitors --enable-json-logs-format run\n"})}),"\n",(0,t.jsx)(n.h3,{id:"dry-run-mode",children:"Dry Run Mode"}),"\n",(0,t.jsx)(n.p,{children:"Test configuration without applying changes:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"hyprdynamicmonitors run --dry-run\n"})}),"\n",(0,t.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/fiffeek/hyprdynamicmonitors",children:"GitHub Repository"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/fiffeek/hyprdynamicmonitors/issues",children:"Issue Tracker"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/fiffeek/hyprdynamicmonitors/tree/main/examples",children:"Examples"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./quickstart/installation",children:"Installation"})," - Build from source"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/fiffeek/hyprdynamicmonitors/tree/main/examples",children:"Examples"})," - Example configurations"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var s=i(6540);const t={},l=s.createContext(t);function r(e){const n=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);
"use strict";(globalThis.webpackChunkdocs=globalThis.webpackChunkdocs||[]).push([[3967],{8421:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>p,frontMatter:()=>c,metadata:()=>i,toc:()=>t});const i=JSON.parse('{"id":"configuration/callbacks","title":"Callbacks","description":"HyprDynamicMonitors supports custom user commands that are executed before and after profile configuration changes. These commands can be defined globally or per-profile.","source":"@site/versioned_docs/version-v1.3.1/configuration/callbacks.md","sourceDirName":"configuration","slug":"/configuration/callbacks","permalink":"/docs/configuration/callbacks","draft":false,"unlisted":false,"editUrl":"https://github.com/fiffeek/hyprdynamicmonitors/tree/main/docs/versioned_docs/version-v1.3.1/configuration/callbacks.md","tags":[],"version":"v1.3.1","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Notifications","permalink":"/docs/configuration/notifications"},"next":{"title":"Lid Events","permalink":"/docs/configuration/lid-events"}}');var s=l(4848),a=l(8453);const c={sidebar_position:6},o="Callbacks",r={},t=[{value:"Global Callbacks",id:"global-callbacks",level:2},{value:"Profile-Specific Callbacks",id:"profile-specific-callbacks",level:2},{value:"Callback Types",id:"callback-types",level:2},{value:"pre_apply_exec",id:"pre_apply_exec",level:3},{value:"post_apply_exec",id:"post_apply_exec",level:3},{value:"Shell Execution",id:"shell-execution",level:2},{value:"Failure Handling",id:"failure-handling",level:2},{value:"Manual Hyprland Reload",id:"manual-hyprland-reload",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"Conditional Actions",id:"conditional-actions",level:3},{value:"Workspace Management",id:"workspace-management",level:3},{value:"Application Restart",id:"application-restart",level:3},{value:"Logging",id:"logging",level:3},{value:"See Also",id:"see-also",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"callbacks",children:"Callbacks"})}),"\n",(0,s.jsx)(n.p,{children:"HyprDynamicMonitors supports custom user commands that are executed before and after profile configuration changes. These commands can be defined globally or per-profile."}),"\n",(0,s.jsx)(n.h2,{id:"global-callbacks",children:"Global Callbacks"}),"\n",(0,s.jsx)(n.p,{children:"Define commands that run for all profile changes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:"[general]\npre_apply_exec = \"notify-send 'HyprDynamicMonitors' 'Switching monitor profile...'\"\npost_apply_exec = \"notify-send 'HyprDynamicMonitors' 'Profile applied successfully'\"\n"})}),"\n",(0,s.jsx)(n.h2,{id:"profile-specific-callbacks",children:"Profile-Specific Callbacks"}),"\n",(0,s.jsx)(n.p,{children:"Override global callbacks for specific profiles:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'[profiles.gaming_setup]\nconfig_file = "hyprconfigs/gaming.conf"\npre_apply_exec = "notify-send \'Gaming Mode\' \'Activating high-performance profile\'"\npost_apply_exec = "/usr/local/bin/gaming-mode-on.sh"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Profile-specific commands ",(0,s.jsx)(n.strong,{children:"override"})," global commands for that profile."]}),"\n",(0,s.jsx)(n.h2,{id:"callback-types",children:"Callback Types"}),"\n",(0,s.jsx)(n.h3,{id:"pre_apply_exec",children:"pre_apply_exec"}),"\n",(0,s.jsxs)(n.p,{children:["Executed ",(0,s.jsx)(n.strong,{children:"before"})," the new monitor configuration is applied."]}),"\n",(0,s.jsx)(n.p,{children:"Use cases:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Send notifications about upcoming changes"}),"\n",(0,s.jsx)(n.li,{children:"Prepare the system for configuration change"}),"\n",(0,s.jsx)(n.li,{children:"Save current state"}),"\n",(0,s.jsx)(n.li,{children:"Close applications that might interfere"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'pre_apply_exec = "killall -SIGUSR1 waybar"  # Reload waybar before change\n'})}),"\n",(0,s.jsx)(n.h3,{id:"post_apply_exec",children:"post_apply_exec"}),"\n",(0,s.jsxs)(n.p,{children:["Executed ",(0,s.jsx)(n.strong,{children:"after"})," the new monitor configuration is successfully applied."]}),"\n",(0,s.jsx)(n.p,{children:"Use cases:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Send success notifications"}),"\n",(0,s.jsx)(n.li,{children:"Trigger dependent scripts"}),"\n",(0,s.jsx)(n.li,{children:"Reload related applications"}),"\n",(0,s.jsx)(n.li,{children:"Adjust system settings based on new configuration"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'post_apply_exec = "hyprctl reload && systemctl --user restart waybar"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"shell-execution",children:"Shell Execution"}),"\n",(0,s.jsxs)(n.p,{children:["Commands are executed through ",(0,s.jsx)(n.code,{children:"bash -c"}),", supporting:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Shell features (pipes, redirects, environment variables)"}),"\n",(0,s.jsxs)(n.li,{children:["Multiple commands with ",(0,s.jsx)(n.code,{children:"&&"})," or ",(0,s.jsx)(n.code,{children:";"})]}),"\n",(0,s.jsxs)(n.li,{children:["Background processes with ",(0,s.jsx)(n.code,{children:"&"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Examples:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'# Multiple commands\npost_apply_exec = "hyprctl reload && sleep 1 && notify-send \'Done\'"\n\n# Using pipes\npost_apply_exec = "hyprctl monitors | grep -q eDP-1 && notify-send \'Laptop screen active\'"\n\n# Background process\npost_apply_exec = "sleep 2 && restart-dependent-apps.sh &"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"failure-handling",children:"Failure Handling"}),"\n",(0,s.jsx)(n.p,{children:"If exec commands fail:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The error is logged"}),"\n",(0,s.jsx)(n.li,{children:"The service continues operating normally"}),"\n",(0,s.jsxs)(n.li,{children:["Monitor configuration is ",(0,s.jsx)(n.strong,{children:"not"})," rolled back"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This ensures that a failing callback doesn't interrupt monitor configuration."}),"\n",(0,s.jsx)(n.h2,{id:"manual-hyprland-reload",children:"Manual Hyprland Reload"}),"\n",(0,s.jsxs)(n.p,{children:["If you have ",(0,s.jsx)(n.code,{children:"disable_autoreload = true"})," in Hyprland settings, use callbacks to reload manually:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'[general]\npost_apply_exec = "hyprctl reload"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,s.jsx)(n.h3,{id:"conditional-actions",children:"Conditional Actions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'[profiles.docked]\nconfig_file = "hyprconfigs/docked.conf"\npost_apply_exec = "systemctl --user start docked-setup.service"\n\n[profiles.laptop_only]\nconfig_file = "hyprconfigs/laptop.conf"\npost_apply_exec = "systemctl --user stop docked-setup.service"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"workspace-management",children:"Workspace Management"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'post_apply_exec = "hyprctl dispatch workspace 1"  # Switch to workspace 1 after config change\n'})}),"\n",(0,s.jsx)(n.h3,{id:"application-restart",children:"Application Restart"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'post_apply_exec = "killall waybar eww && sleep 1 && waybar & eww daemon &"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"logging",children:"Logging"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'post_apply_exec = "echo \\"$(date): Applied profile\\" >> ~/hyprdynamicmonitors.log"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"./notifications",children:"Notifications"})," - Built-in notification system"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"./profiles",children:"Profiles"})," - Profile configuration"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/fiffeek/hyprdynamicmonitors/tree/main/examples/callbacks",children:"Examples - Callbacks"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>c,x:()=>o});var i=l(6540);const s={},a=i.createContext(s);function c(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);
"use strict";(globalThis.webpackChunkdocs=globalThis.webpackChunkdocs||[]).push([[4277],{6172:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"advanced/systemd","title":"Running with systemd","description":"For production use, it\'s recommended to run HyprDynamicMonitors as a systemd user service. This ensures automatic restart on failures and proper integration with your session management.","source":"@site/docs/advanced/systemd.md","sourceDirName":"advanced","slug":"/advanced/systemd","permalink":"/docs/next/advanced/systemd","draft":false,"unlisted":false,"editUrl":"https://github.com/fiffeek/hyprdynamicmonitors/tree/main/docs/docs/advanced/systemd.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Templates","permalink":"/docs/next/advanced/templates"},"next":{"title":"FAQ","permalink":"/docs/next/faq"}}');var r=i(4848),t=i(8453);const o={sidebar_position:3},d="Running with systemd",a={},l=[{value:"AUR",id:"aur",level:2},{value:"Nix",id:"nix",level:2},{value:"NixOS Module",id:"nixos-module",level:3},{value:"Home Manager Module",id:"home-manager-module",level:3},{value:"Using with NixOS + Home Manager",id:"using-with-nixos--home-manager",level:3},{value:"Running Hyprland outside of systemd",id:"running-hyprland-outside-of-systemd",level:2},{value:"Option 1: Restart-based initialization",id:"option-1-restart-based-initialization",level:3},{value:"Option 2: Custom systemd target",id:"option-2-custom-systemd-target",level:3},{value:"Option 3: Wrapper script (without systemd)",id:"option-3-wrapper-script-without-systemd",level:3},{value:"Manual Installation",id:"manual-installation",level:2},{value:"Service Management",id:"service-management",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Service fails to start",id:"service-fails-to-start",level:3},{value:"Configuration changes not applying",id:"configuration-changes-not-applying",level:3},{value:"Environment variables not available",id:"environment-variables-not-available",level:3},{value:"See Also",id:"see-also",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"running-with-systemd",children:"Running with systemd"})}),"\n",(0,r.jsx)(n.p,{children:"For production use, it's recommended to run HyprDynamicMonitors as a systemd user service. This ensures automatic restart on failures and proper integration with your session management."}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["Ensure you're properly ",(0,r.jsx)(n.a,{href:"https://wiki.hypr.land/Nix/Hyprland-on-Home-Manager/#programs-dont-work-in-systemd-services-but-do-on-the-terminal",children:"pushing environment variables to systemd"})," for correct Hyprland integration."]})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://github.com/fiffeek/hyprdynamicmonitors/blob/main/infrastructure/systemd/hyprdynamicmonitors.service",children:"default systemd service configuration"})," assumes you're running Hyprland under systemd:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ini",metastring:'title="infrastructure/systemd/hyprdynamicmonitors.service"',children:"[Unit]\nDescription=HyprDynamicMonitors - Dynamic monitor configuration for Hyprland\nDocumentation=https://fiffeek.github.io/hyprdynamicmonitors/\nPartOf=graphical-session.target\nRequires=graphical-session.target\nAfter=graphical-session.target\nConditionEnvironment=WAYLAND_DISPLAY\n\n[Service]\nType=simple\nExecStart=/usr/bin/hyprdynamicmonitors run\nSlice=session.slice\nRestart=on-failure\nRestartSec=5\n\n[Install]\nWantedBy=graphical-session.target\n"})}),"\n",(0,r.jsx)(n.p,{children:"This service file is automatically included in AUR and Nix deployments."}),"\n",(0,r.jsx)(n.h2,{id:"aur",children:"AUR"}),"\n",(0,r.jsx)(n.p,{children:"When installed via AUR, the service is automatically registered as a user service. Verify the installation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Reload service definitions\nsystemctl --user daemon-reload\n\n# Check the current status\nsystemctl --user status hyprdynamicmonitors.service\n"})}),"\n",(0,r.jsx)(n.p,{children:"If you're running Hyprland under systemd (the default for most installations), you can start the service immediately:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Start the service once\nsystemctl --user start hyprdynamicmonitors.service\n\n# Enable to automatically start on login\nsystemctl --user enable --now hyprdynamicmonitors.service\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["If you're running Hyprland outside of systemd, see the ",(0,r.jsx)(n.a,{href:"#running-hyprland-outside-of-systemd",children:"Running Hyprland outside of systemd"})," section below."]})}),"\n",(0,r.jsx)(n.h2,{id:"nix",children:"Nix"}),"\n",(0,r.jsx)(n.p,{children:"HyprDynamicMonitors provides both a NixOS module and a Home Manager module for declarative configuration. Both modules automatically set up the systemd service."}),"\n",(0,r.jsx)(n.h3,{id:"nixos-module",children:"NixOS Module"}),"\n",(0,r.jsx)(n.p,{children:"Add the flake to your NixOS configuration inputs:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-nix",metastring:'title="flake.nix"',children:'{\n  inputs = {\n    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";\n    hyprdynamicmonitors.url = "github:fiffeek/hyprdynamicmonitors";\n  };\n\n  outputs = { self, nixpkgs, hyprdynamicmonitors, ... }: {\n    nixosConfigurations.yourhost = nixpkgs.lib.nixosSystem {\n      modules = [\n        hyprdynamicmonitors.nixosModules.default\n        ./configuration.nix\n      ];\n    };\n  };\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Then configure the service in your ",(0,r.jsx)(n.code,{children:"configuration.nix"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-nix",metastring:'title="configuration.nix"',children:'{\n  services.hyprdynamicmonitors = {\n    enable = true;\n    mode = "user";  # "user", "system", or "none"\n\n    # Optional: provide inline configuration\n    config = \'\'\n      [general]\n      destination = "$HOME/.config/hypr/config.d/99_autogenerated-monitors.conf"\n      debounce_time_ms = 1500\n    \'\';\n\n    # Or use a configuration file\n    configFile = ./config.toml;\n\n    # Optional: install additional files (e.g., monitor profiles)\n    extraFiles = {\n      "xdg/hyprdynamicmonitors/hyprconfigs" = ./hyprconfigs;\n    };\n\n    # Optional: customize systemd target (default: graphical-session.target)\n    systemdTarget = "graphical-session.target";\n\n    # Optional: pass extra flags to the binary\n    extraFlags = [ "--debug" ];\n\n    # Optional: override serviceConfig options\n    serviceOptions = {\n      # Add custom systemd service options here\n    };\n  };\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Configuration options:"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Option"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"enable"})}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"false"})}),(0,r.jsx)(n.td,{children:"Enable the service"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"mode"})}),(0,r.jsx)(n.td,{children:"enum"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"user"'})}),(0,r.jsxs)(n.td,{children:["Service type: ",(0,r.jsx)(n.code,{children:'"user"'}),", ",(0,r.jsx)(n.code,{children:'"system"'}),", or ",(0,r.jsx)(n.code,{children:'"none"'})," (config only)"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"package"})}),(0,r.jsx)(n.td,{children:"package"}),(0,r.jsx)(n.td,{children:"from flake"}),(0,r.jsx)(n.td,{children:"Package providing the binary"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"configPath"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/etc/xdg/hyprdynamicmonitors/config.toml"})}),(0,r.jsx)(n.td,{children:"Config file location"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"config"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"null"})}),(0,r.jsxs)(n.td,{children:["Inline TOML configuration (takes precedence over ",(0,r.jsx)(n.code,{children:"configFile"}),")"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"configFile"})}),(0,r.jsx)(n.td,{children:"path"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"null"})}),(0,r.jsx)(n.td,{children:"Path to configuration file"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"extraFiles"})}),(0,r.jsx)(n.td,{children:"attrs"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"null"})}),(0,r.jsxs)(n.td,{children:["Additional files to install under ",(0,r.jsx)(n.code,{children:"/etc/"})," (relative paths)"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"installExamples"})}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"true"})}),(0,r.jsx)(n.td,{children:"Install example config if no config provided"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"systemdTarget"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"graphical-session.target"'})}),(0,r.jsx)(n.td,{children:"Systemd target to bind to"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"extraFlags"})}),(0,r.jsx)(n.td,{children:"list of strings"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"[]"})}),(0,r.jsx)(n.td,{children:"Extra command-line flags"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"serviceOptions"})}),(0,r.jsx)(n.td,{children:"attrs"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"{}"})}),(0,r.jsx)(n.td,{children:"Extra systemd service options"})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:["The module installs configuration to ",(0,r.jsx)(n.code,{children:"/etc/xdg/hyprdynamicmonitors/"})," and creates a systemd user or system service depending on the ",(0,r.jsx)(n.code,{children:"mode"})," setting."]}),"\n",(0,r.jsx)(n.h3,{id:"home-manager-module",children:"Home Manager Module"}),"\n",(0,r.jsx)(n.p,{children:"Add the flake to your Home Manager configuration:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-nix",metastring:'title="flake.nix"',children:'{\n  inputs = {\n    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";\n    home-manager = {\n      url = "github:nix-community/home-manager";\n      inputs.nixpkgs.follows = "nixpkgs";\n    };\n    hyprdynamicmonitors.url = "github:fiffeek/hyprdynamicmonitors";\n  };\n\n  outputs = { self, nixpkgs, home-manager, hyprdynamicmonitors, ... }: {\n    homeConfigurations.youruser = home-manager.lib.homeManagerConfiguration {\n      modules = [\n        hyprdynamicmonitors.homeManagerModules.default\n        ./home.nix\n      ];\n    };\n  };\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Configure in your ",(0,r.jsx)(n.code,{children:"home.nix"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-nix",metastring:'title="home.nix"',children:'{\n  home.hyprdynamicmonitors = {\n    enable = true;\n\n    # Optional: provide inline configuration\n    config = \'\'\n      [general]\n      destination = "$HOME/.config/hypr/config.d/99_autogenerated-monitors.conf"\n      debounce_time_ms = 1500\n    \'\';\n\n    # Or use a configuration file\n    configFile = ./config.toml;\n\n    # Optional: install additional files under ~/.config\n    extraFiles = {\n      "hyprdynamicmonitors/hyprconfigs" = ./hyprconfigs;\n    };\n\n    # Optional: customize systemd target\n    # Defaults to config.wayland.systemd.target if set\n    systemdTarget = "graphical-session.target";\n\n    # Optional: pass extra flags to the binary\n    extraFlags = [ "--debug" ];\n\n    # Optional: override service options\n    serviceOptions = {\n      # Add custom systemd service options here\n    };\n  };\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Configuration options:"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Option"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"enable"})}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"false"})}),(0,r.jsx)(n.td,{children:"Enable the service"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"package"})}),(0,r.jsx)(n.td,{children:"package"}),(0,r.jsx)(n.td,{children:"from flake"}),(0,r.jsx)(n.td,{children:"Package providing the binary"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"configPath"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"~/.config/hyprdynamicmonitors/config.toml"})}),(0,r.jsx)(n.td,{children:"Config file location"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"config"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"null"})}),(0,r.jsxs)(n.td,{children:["Inline TOML configuration (takes precedence over ",(0,r.jsx)(n.code,{children:"configFile"}),")"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"configFile"})}),(0,r.jsx)(n.td,{children:"path"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"null"})}),(0,r.jsx)(n.td,{children:"Path to configuration file"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"extraFiles"})}),(0,r.jsx)(n.td,{children:"attrs"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"null"})}),(0,r.jsxs)(n.td,{children:["Additional files to install under ",(0,r.jsx)(n.code,{children:"~/.config/"})," (relative paths)"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"installExamples"})}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"true"})}),(0,r.jsx)(n.td,{children:"Install example config if no config provided"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"systemdTarget"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"config.wayland.systemd.target"})}),(0,r.jsx)(n.td,{children:"Systemd target to bind to"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"extraFlags"})}),(0,r.jsx)(n.td,{children:"list of strings"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"[]"})}),(0,r.jsx)(n.td,{children:"Extra command-line flags"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"serviceOptions"})}),(0,r.jsx)(n.td,{children:"attrs"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"{}"})}),(0,r.jsx)(n.td,{children:"Extra systemd service options"})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:["The Home Manager module installs configuration to ",(0,r.jsx)(n.code,{children:"~/.config/hyprdynamicmonitors/"})," and creates a systemd user service."]}),"\n",(0,r.jsx)(n.h3,{id:"using-with-nixos--home-manager",children:"Using with NixOS + Home Manager"}),"\n",(0,r.jsx)(n.p,{children:"You can also use Home Manager as a NixOS module:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-nix",metastring:'title="configuration.nix"',children:"{ inputs, ... }:\n{\n  imports = [ inputs.home-manager.nixosModules.home-manager ];\n\n  home-manager.users.youruser = {\n    imports = [ inputs.hyprdynamicmonitors.homeManagerModules.default ];\n\n    home.hyprdynamicmonitors = {\n      enable = true;\n      configFile = ./config.toml;\n    };\n  };\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"running-hyprland-outside-of-systemd",children:"Running Hyprland outside of systemd"}),"\n",(0,r.jsx)(n.p,{children:"If you're running Hyprland outside of systemd, you'll need to customize the service configuration. There are two approaches to modifying the service definition:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Using systemd overrides"})," (via ",(0,r.jsx)(n.code,{children:"systemctl --user edit hyprdynamicmonitors.service"}),"):"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Creates ",(0,r.jsx)(n.code,{children:"~/.config/systemd/user/hyprdynamicmonitors.service.d/override.conf"})]}),"\n",(0,r.jsx)(n.li,{children:"Requires clearing certain fields before overriding them"}),"\n",(0,r.jsx)(n.li,{children:"More complex but preserves upstream changes"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Replacing the unit file entirely"})," (recommended):"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Create ",(0,r.jsx)(n.code,{children:"~/.config/systemd/user/hyprdynamicmonitors.service"})]}),"\n",(0,r.jsx)(n.li,{children:"Completely shadows the packaged definition"}),"\n",(0,r.jsx)(n.li,{children:"Simpler to understand and maintain"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Choose one of the following strategies based on your setup:"}),"\n",(0,r.jsx)(n.h3,{id:"option-1-restart-based-initialization",children:"Option 1: Restart-based initialization"}),"\n",(0,r.jsx)(n.p,{children:"This is the simplest approach. Start the service at boot and let systemd's restart mechanism handle initialization:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ini",metastring:'title="~/.config/systemd/user/hyprdynamicmonitors.service"',children:"[Unit]\nDescription=HyprDynamicMonitors - Dynamic monitor configuration for Hyprland\nDocumentation=https://fiffeek.github.io/hyprdynamicmonitors/\n\n[Service]\nType=exec\nExecStart=/usr/bin/hyprdynamicmonitors run\nRestart=on-failure\nRestartSec=5\n\n[Install]\nWantedBy=default.target\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"How this works:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The service continuously restarts until Hyprland launches"}),"\n",(0,r.jsx)(n.li,{children:"Waits for environment variables to become available"}),"\n",(0,r.jsx)(n.li,{children:"Automatically starts once the system is ready"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Advantages:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Simple configuration"}),"\n",(0,r.jsx)(n.li,{children:"No additional dependencies"}),"\n",(0,r.jsx)(n.li,{children:"Works with any Hyprland startup method"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"option-2-custom-systemd-target",children:"Option 2: Custom systemd target"}),"\n",(0,r.jsxs)(n.p,{children:["For more precise control over service lifecycle, you can create a ",(0,r.jsx)(n.a,{href:"https://github.com/fiffeek/.dotfiles.v2/commit/2a0d400b81031e3786a2779c36f70c9771aee884",children:"custom systemd target"})," that Hyprland explicitly manages."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Advantages:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Clean startup and shutdown"}),"\n",(0,r.jsx)(n.li,{children:"Better integration with other services"}),"\n",(0,r.jsx)(n.li,{children:"No unnecessary restart attempts"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"First, configure Hyprland to manage the custom target:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-conf",metastring:'title="~/.config/hypr/hyprland.conf"',children:"exec-once = systemctl --user start hyprland-custom-session.target\nbind = $mainMod, X, exec, systemctl --user stop hyprland-custom-session.target\n"})}),"\n",(0,r.jsx)(n.p,{children:"Next, create the custom target file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ini",metastring:'title="~/.config/systemd/user/hyprland-custom-session.target"',children:"[Unit]\nDescription=A target for other services when Hyprland becomes ready\nAfter=graphical-session-pre.target\nWants=graphical-session-pre.target\nBindsTo=graphical-session.target\n"})}),"\n",(0,r.jsx)(n.p,{children:"Finally, create the service file that depends on this target:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ini",metastring:'title="~/.config/systemd/user/hyprdynamicmonitors.service"',children:"[Unit]\nDescription=HyprDynamicMonitors - Dynamic monitor configuration for Hyprland\nDocumentation=https://fiffeek.github.io/hyprdynamicmonitors/\nAfter=dbus.socket\nRequires=dbus.socket\nPartOf=hyprland-custom-session.target\n\n[Service]\nType=exec\nExecStart=/usr/bin/hyprdynamicmonitors run\nRestart=on-failure\nRestartSec=5\n\n[Install]\nWantedBy=hyprland-custom-session.target\n"})}),"\n",(0,r.jsx)(n.p,{children:"After creating these files, enable the service:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"systemctl --user daemon-reload\nsystemctl --user enable hyprdynamicmonitors.service\n"})}),"\n",(0,r.jsx)(n.p,{children:"The service will now automatically start when Hyprland launches the custom target."}),"\n",(0,r.jsx)(n.h3,{id:"option-3-wrapper-script-without-systemd",children:"Option 3: Wrapper script (without systemd)"}),"\n",(0,r.jsx)(n.p,{children:"If you prefer not to use systemd at all, you can create a simple bash wrapper with automatic restart:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",metastring:'title="~/bin/hyprdynamicmonitors-wrapper.sh"',children:'#!/bin/bash\nwhile true; do\n    /usr/bin/hyprdynamicmonitors run\n    echo "HyprDynamicMonitors exited with code $?, restarting in 5 seconds..."\n    sleep 5\ndone\n'})}),"\n",(0,r.jsx)(n.p,{children:"Make it executable and launch it from Hyprland:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"chmod +x ~/bin/hyprdynamicmonitors-wrapper.sh\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-conf",metastring:'title="~/.config/hypr/hyprland.conf"',children:"exec-once = ~/bin/hyprdynamicmonitors-wrapper.sh\n"})}),"\n",(0,r.jsx)(n.h2,{id:"manual-installation",children:"Manual Installation"}),"\n",(0,r.jsx)(n.p,{children:"If you installed HyprDynamicMonitors from source or using a GitHub release binary, you'll need to manually create the service file:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Copy one of the service configurations above to ",(0,r.jsx)(n.code,{children:"~/.config/systemd/user/hyprdynamicmonitors.service"})]}),"\n",(0,r.jsxs)(n.li,{children:["Adjust the ",(0,r.jsx)(n.code,{children:"ExecStart"})," path if you installed the binary in a custom location"]}),"\n",(0,r.jsx)(n.li,{children:"Reload systemd and start the service:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"systemctl --user daemon-reload\nsystemctl --user enable --now hyprdynamicmonitors.service\n"})}),"\n",(0,r.jsx)(n.p,{children:"Alternatively, use the wrapper script approach described above."}),"\n",(0,r.jsx)(n.h2,{id:"service-management",children:"Service Management"}),"\n",(0,r.jsx)(n.p,{children:"Once set up as a systemd service, you can manage it with standard systemd commands:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Check status\nsystemctl --user status hyprdynamicmonitors\n\n# View logs\njournalctl --user -u hyprdynamicmonitors -f\n\n# Restart the service\nsystemctl --user restart hyprdynamicmonitors\n\n# Reload configuration\nsystemctl --user reload hyprdynamicmonitors\n\n# Stop the service\nsystemctl --user stop hyprdynamicmonitors\n\n# Disable automatic start\nsystemctl --user disable hyprdynamicmonitors\n"})}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(n.h3,{id:"service-fails-to-start",children:"Service fails to start"}),"\n",(0,r.jsx)(n.p,{children:"Check the logs:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"journalctl --user -u hyprdynamicmonitors -n 50\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Common issues:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Hyprland not running yet (expected when using restart-based initialization)"}),"\n",(0,r.jsx)(n.li,{children:"Missing environment variables (see tip at top of page)"}),"\n",(0,r.jsx)(n.li,{children:"Invalid configuration file"}),"\n",(0,r.jsx)(n.li,{children:"Binary not found at the specified path"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"configuration-changes-not-applying",children:"Configuration changes not applying"}),"\n",(0,r.jsx)(n.p,{children:"Reload the service:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"systemctl --user reload hyprdynamicmonitors\n"})}),"\n",(0,r.jsx)(n.p,{children:"Or rely on automatic hot reload (enabled by default)."}),"\n",(0,r.jsx)(n.h3,{id:"environment-variables-not-available",children:"Environment variables not available"}),"\n",(0,r.jsxs)(n.p,{children:["Ensure environment variables are properly exported to systemd. See ",(0,r.jsx)(n.a,{href:"https://wiki.hypr.land/Nix/Hyprland-on-Home-Manager/#programs-dont-work-in-systemd-services-but-do-on-the-terminal",children:"Hyprland's systemd integration guide"})," for detailed instructions."]}),"\n",(0,r.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../usage/signals",children:"Signals"})," - Signal handling and hot reload functionality"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../category/quick-start",children:"Quick Start"})," - Initial setup and configuration guide"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>d});var s=i(6540);const r={},t=s.createContext(r);function o(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);